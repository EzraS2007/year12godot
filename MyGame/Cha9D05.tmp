[gd_scene load_steps=3 format=3 uid="uid://1au7io0bc6ur"]

[sub_resource type="GDScript" id="GDScript_jccc3"]
script/source = "extends CharacterBody3D
@onready var head = $head
@onready var camera = $head/Camera3D
@export var speed = 5
const WAlK_SPEED = 5
const SPRINT_SPEED = 8
var jumped = false
@onready var mouse_sensitivity = 0.01
const JUMP_VELOCITY = 4.5
var gravity = 9.8
@onready var right_wall_cast = $head/RightWallCast
@onready var left_wall_cast = $head/LeftWallCast
@export var jump_speed = 5

const BOB_FREQ = 2.0
const BOB_AMP = 0.08
var t_bob = 0.0

func wall_run(move_dir):
	if Input.is_action_pressed(\"up\"):
		if is_on_wall() and right_wall_cast.is_colliding() and velocity.y < 0:
			gravity = 1
		if is_on_wall() and left_wall_cast.is_colliding() and velocity.y < 0:
			gravity = 1
	if Input.is_action_just_pressed(\"jump\") and jumped == false and not is_on_floor():
		if is_on_wall():
			if left_wall_cast.is_colliding():
				velocity = head.transform.basis * Vector3.RIGHT * 7 + move_dir
				velocity.y += 4
				jumped = true
			if right_wall_cast.is_colliding():
				velocity = head.transform.basis * Vector3.LEFT * 7 + move_dir
				velocity.y += 4
				jumped = true

func _physics_process(delta):
	velocity.y += -gravity * delta
	var input_dir = Input.get_vector(\"left\",\"right\",\"up\",\"down\")
	var move_dir = transform.basis * Vector3(input_dir.x, 0, input_dir.y)
	if not is_on_floor():
		velocity.y -= gravity * delta
	if not is_on_wall():
		if is_on_floor:
			jumped = false
		gravity = 9.8
	if input_dir:
		velocity.x =  move_dir.x * speed
		velocity.z = move_dir.z * speed
	else:
		velocity.x = 0
		velocity.z = 0
	if is_on_floor() and Input.is_action_just_pressed(\"jump\"):
		velocity.y = JUMP_VELOCITY
		
	t_bob += delta * velocity.length() * float(is_on_floor())
	camera.transform.origin = _headbob(t_bob)
	move_and_slide()
	wall_run(move_dir)
	
func _headbob(time) -> Vector3:
	var pos = Vector3.ZERO
	pos.y = sin(time * BOB_FREQ) * BOB_AMP
	pos.x = cos(time * BOB_FREQ / 2) * BOB_AMP 
	return pos

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		rotate_y(-event.relative.x * mouse_sensitivity)
		camera.rotate_x(-event.relative.y * mouse_sensitivity)
		camera.rotation.x = clamp(camera.rotation.x, -1, 1)


"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_8gmnh"]

[node name="CharacterBody3D" type="CharacterBody3D"]
script = SubResource("GDScript_jccc3")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_8gmnh")

[node name="head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.423697, 0)

[node name="Camera3D" type="Camera3D" parent="head"]

[node name="RightWallCast" type="RayCast3D" parent="head"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0)

[node name="LeftWallCast" type="RayCast3D" parent="head"]
transform = Transform3D(-4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0)
